// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 8.0.18_20201104191107 by TAF Team.
// Generated from `./FileFdfs.jce'
// **********************************************************************

/* eslint-disable */

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if (TafStream.JceStruct == undefined) {
    TafStream.JceStruct = function() {
        this._jce_double_precision_ = -1;
    }
    TafStream.JceStruct.prototype.setPrecision = function(d) {
        if ((d == -1) || (d >= 0 && d <= 15)) {
            this._jce_double_precision_ = d;
            return true;
        }
        return false;
    }
    TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
    TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
    TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var COMM = COMM || {};
module.exports.COMM = COMM;

COMM.FileFdfsServerProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

COMM.FileFdfsServerProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

COMM.FileFdfsServerProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


COMM.ClientInfo = function() {
    this.userId = "";
    this.channel = "";
    this.guid = "";
    this.xua = "";
    this.imei = "";
    this.macs = new TafStream.List(TafStream.String);
    this.hosts = new TafStream.List(TafStream.String);
    this.extraParams = new TafStream.Map(TafStream.String, TafStream.String);
    this._classname = "COMM.ClientInfo";
};
COMM.ClientInfo.prototype = new TafStream.JceStruct();
COMM.ClientInfo._classname = "COMM.ClientInfo";

COMM.ClientInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.ClientInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.ClientInfo._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.ClientInfo();
    tmp.userId = is.readString(1, false, "");
    tmp.channel = is.readString(2, false, "");
    tmp.guid = is.readString(3, false, "");
    tmp.xua = is.readString(4, false, "");
    tmp.imei = is.readString(5, false, "");
    tmp.macs = is.readList(7, false, TafStream.List(TafStream.String));
    tmp.hosts = is.readList(8, false, TafStream.List(TafStream.String));
    tmp.extraParams = is.readMap(9, false, TafStream.Map(TafStream.String, TafStream.String));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.ClientInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.userId != undefined && this.userId != "") {
        os.writeString(1, this.userId);
    }
    if (this.channel != undefined && this.channel != "") {
        os.writeString(2, this.channel);
    }
    if (this.guid != undefined && this.guid != "") {
        os.writeString(3, this.guid);
    }
    if (this.xua != undefined && this.xua != "") {
        os.writeString(4, this.xua);
    }
    if (this.imei != undefined && this.imei != "") {
        os.writeString(5, this.imei);
    }
    if (this.macs != undefined) {
        os.writeList(7, this.macs);
    }
    if (this.hosts != undefined) {
        os.writeList(8, this.hosts);
    }
    if (this.extraParams != undefined) {
        os.writeMap(9, this.extraParams);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.ClientInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.ClientInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.ClientInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.userId = this.userId;
    tmp.channel = this.channel;
    tmp.guid = this.guid;
    tmp.xua = this.xua;
    tmp.imei = this.imei;
    tmp.macs = this.macs.toObject();
    tmp.hosts = this.hosts.toObject();
    tmp.extraParams = this.extraParams.toObject();
    
    return tmp;
}
COMM.ClientInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("userId") || (this.userId = json.userId);
    !json.hasOwnProperty("channel") || (this.channel = json.channel);
    !json.hasOwnProperty("guid") || (this.guid = json.guid);
    !json.hasOwnProperty("xua") || (this.xua = json.xua);
    !json.hasOwnProperty("imei") || (this.imei = json.imei);
    !json.hasOwnProperty("macs") || (this.macs.readFromObject(json.macs));
    !json.hasOwnProperty("hosts") || (this.hosts.readFromObject(json.hosts));
    !json.hasOwnProperty("extraParams") || (this.extraParams.readFromObject(json.extraParams));
}
COMM.ClientInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.ClientInfo.new = function () {
    return new COMM.ClientInfo();
}
COMM.ClientInfo.create = function (is) {
    return COMM.ClientInfo._readFrom(is);
}
COMM.UploadFileReq = function() {
    this.file = new TafStream.BinBuffer;
    this.fileName = "";
    this.filePath = "";
    this.businessName = "";
    this.method = 0;
    this._classname = "COMM.UploadFileReq";
};
COMM.UploadFileReq.prototype = new TafStream.JceStruct();
COMM.UploadFileReq._classname = "COMM.UploadFileReq";

COMM.UploadFileReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.UploadFileReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.UploadFileReq._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.UploadFileReq();
    tmp.file = is.readBytes(0, true, TafStream.BinBuffer);
    tmp.fileName = is.readString(1, true, "");
    tmp.filePath = is.readString(2, false, "");
    tmp.businessName = is.readString(3, true, "");
    tmp.method = is.readInt32(4, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.UploadFileReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeBytes(0, this.file);
    os.writeString(1, this.fileName);
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(2, this.filePath);
    }
    os.writeString(3, this.businessName);
    if (this.method != undefined && this.method != 0) {
        os.writeInt32(4, this.method);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.UploadFileReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.UploadFileReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.UploadFileReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.file = this.file.toObject();
    tmp.fileName = this.fileName;
    tmp.filePath = this.filePath;
    tmp.businessName = this.businessName;
    tmp.method = this.method;
    
    return tmp;
}
COMM.UploadFileReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("file") || (this.file.readFromObject(json.file));
    !json.hasOwnProperty("fileName") || (this.fileName = json.fileName);
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
    !json.hasOwnProperty("businessName") || (this.businessName = json.businessName);
    !json.hasOwnProperty("method") || (this.method = json.method);
}
COMM.UploadFileReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.UploadFileReq.new = function () {
    return new COMM.UploadFileReq();
}
COMM.UploadFileReq.create = function (is) {
    return COMM.UploadFileReq._readFrom(is);
}
COMM.UploadFileRsp = function() {
    this.errCode = 0;
    this.errMsg = "";
    this.filePath = "";
    this.ext = "";
    this._classname = "COMM.UploadFileRsp";
};
COMM.UploadFileRsp.prototype = new TafStream.JceStruct();
COMM.UploadFileRsp._classname = "COMM.UploadFileRsp";

COMM.UploadFileRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.UploadFileRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.UploadFileRsp._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.UploadFileRsp();
    tmp.errCode = is.readInt32(0, false, 0);
    tmp.errMsg = is.readString(1, false, "");
    tmp.filePath = is.readString(2, false, "");
    tmp.ext = is.readString(3, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.UploadFileRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.errCode != undefined && this.errCode != 0) {
        os.writeInt32(0, this.errCode);
    }
    if (this.errMsg != undefined && this.errMsg != "") {
        os.writeString(1, this.errMsg);
    }
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(2, this.filePath);
    }
    if (this.ext != undefined && this.ext != "") {
        os.writeString(3, this.ext);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.UploadFileRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.UploadFileRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.UploadFileRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.errCode = this.errCode;
    tmp.errMsg = this.errMsg;
    tmp.filePath = this.filePath;
    tmp.ext = this.ext;
    
    return tmp;
}
COMM.UploadFileRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("errCode") || (this.errCode = json.errCode);
    !json.hasOwnProperty("errMsg") || (this.errMsg = json.errMsg);
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
    !json.hasOwnProperty("ext") || (this.ext = json.ext);
}
COMM.UploadFileRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.UploadFileRsp.new = function () {
    return new COMM.UploadFileRsp();
}
COMM.UploadFileRsp.create = function (is) {
    return COMM.UploadFileRsp._readFrom(is);
}
COMM.DownloadFileReq = function() {
    this.fileName = "";
    this.client = new COMM.ClientInfo;
    this.filePath = "";
    this.businessName = "";
    this._classname = "COMM.DownloadFileReq";
};
COMM.DownloadFileReq.prototype = new TafStream.JceStruct();
COMM.DownloadFileReq._classname = "COMM.DownloadFileReq";

COMM.DownloadFileReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.DownloadFileReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.DownloadFileReq._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.DownloadFileReq();
    tmp.fileName = is.readString(0, true, "");
    tmp.client = is.readStruct(1, false, COMM.ClientInfo);
    tmp.filePath = is.readString(2, false, "");
    tmp.businessName = is.readString(3, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.DownloadFileReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.fileName);
    os.writeStruct(1, this.client);
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(2, this.filePath);
    }
    os.writeString(3, this.businessName);
    os.resumePrecision && os.resumePrecision();
};
COMM.DownloadFileReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.DownloadFileReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.DownloadFileReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.fileName = this.fileName;
    tmp.client = this.client.toObject();
    tmp.filePath = this.filePath;
    tmp.businessName = this.businessName;
    
    return tmp;
}
COMM.DownloadFileReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fileName") || (this.fileName = json.fileName);
    !json.hasOwnProperty("client") || (this.client.readFromObject(json.client));
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
    !json.hasOwnProperty("businessName") || (this.businessName = json.businessName);
}
COMM.DownloadFileReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.DownloadFileReq.new = function () {
    return new COMM.DownloadFileReq();
}
COMM.DownloadFileReq.create = function (is) {
    return COMM.DownloadFileReq._readFrom(is);
}
COMM.DownloadFileRsp = function() {
    this.errCode = 0;
    this.errMsg = "";
    this.file = new TafStream.BinBuffer;
    this._classname = "COMM.DownloadFileRsp";
};
COMM.DownloadFileRsp.prototype = new TafStream.JceStruct();
COMM.DownloadFileRsp._classname = "COMM.DownloadFileRsp";

COMM.DownloadFileRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.DownloadFileRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.DownloadFileRsp._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.DownloadFileRsp();
    tmp.errCode = is.readInt32(0, false, 0);
    tmp.errMsg = is.readString(1, false, "");
    tmp.file = is.readBytes(2, false, TafStream.BinBuffer);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.DownloadFileRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.errCode != undefined && this.errCode != 0) {
        os.writeInt32(0, this.errCode);
    }
    if (this.errMsg != undefined && this.errMsg != "") {
        os.writeString(1, this.errMsg);
    }
    if (this.file != undefined) {
        os.writeBytes(2, this.file);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.DownloadFileRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.DownloadFileRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.DownloadFileRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.errCode = this.errCode;
    tmp.errMsg = this.errMsg;
    tmp.file = this.file.toObject();
    
    return tmp;
}
COMM.DownloadFileRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("errCode") || (this.errCode = json.errCode);
    !json.hasOwnProperty("errMsg") || (this.errMsg = json.errMsg);
    !json.hasOwnProperty("file") || (this.file.readFromObject(json.file));
}
COMM.DownloadFileRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.DownloadFileRsp.new = function () {
    return new COMM.DownloadFileRsp();
}
COMM.DownloadFileRsp.create = function (is) {
    return COMM.DownloadFileRsp._readFrom(is);
}
COMM.ListFilesReq = function() {
    this.filePath = "";
    this._classname = "COMM.ListFilesReq";
};
COMM.ListFilesReq.prototype = new TafStream.JceStruct();
COMM.ListFilesReq._classname = "COMM.ListFilesReq";

COMM.ListFilesReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.ListFilesReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.ListFilesReq._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.ListFilesReq();
    tmp.filePath = is.readString(0, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.ListFilesReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(0, this.filePath);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.ListFilesReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.ListFilesReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.ListFilesReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.filePath = this.filePath;
    
    return tmp;
}
COMM.ListFilesReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
}
COMM.ListFilesReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.ListFilesReq.new = function () {
    return new COMM.ListFilesReq();
}
COMM.ListFilesReq.create = function (is) {
    return COMM.ListFilesReq._readFrom(is);
}
COMM.ListFilesRsp = function() {
    this.errCode = 0;
    this.errMsg = "";
    this.files = new TafStream.List(TafStream.String);
    this._classname = "COMM.ListFilesRsp";
};
COMM.ListFilesRsp.prototype = new TafStream.JceStruct();
COMM.ListFilesRsp._classname = "COMM.ListFilesRsp";

COMM.ListFilesRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.ListFilesRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.ListFilesRsp._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.ListFilesRsp();
    tmp.errCode = is.readInt32(0, false, 0);
    tmp.errMsg = is.readString(1, false, "");
    tmp.files = is.readList(2, false, TafStream.List(TafStream.String));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.ListFilesRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.errCode != undefined && this.errCode != 0) {
        os.writeInt32(0, this.errCode);
    }
    if (this.errMsg != undefined && this.errMsg != "") {
        os.writeString(1, this.errMsg);
    }
    if (this.files != undefined) {
        os.writeList(2, this.files);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.ListFilesRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.ListFilesRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.ListFilesRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.errCode = this.errCode;
    tmp.errMsg = this.errMsg;
    tmp.files = this.files.toObject();
    
    return tmp;
}
COMM.ListFilesRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("errCode") || (this.errCode = json.errCode);
    !json.hasOwnProperty("errMsg") || (this.errMsg = json.errMsg);
    !json.hasOwnProperty("files") || (this.files.readFromObject(json.files));
}
COMM.ListFilesRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.ListFilesRsp.new = function () {
    return new COMM.ListFilesRsp();
}
COMM.ListFilesRsp.create = function (is) {
    return COMM.ListFilesRsp._readFrom(is);
}
COMM.DeleteFileReq = function() {
    this.fileName = "";
    this.filePath = "";
    this.businessName = "";
    this._classname = "COMM.DeleteFileReq";
};
COMM.DeleteFileReq.prototype = new TafStream.JceStruct();
COMM.DeleteFileReq._classname = "COMM.DeleteFileReq";

COMM.DeleteFileReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.DeleteFileReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.DeleteFileReq._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.DeleteFileReq();
    tmp.fileName = is.readString(0, false, "");
    tmp.filePath = is.readString(1, false, "");
    tmp.businessName = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.DeleteFileReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.fileName != undefined && this.fileName != "") {
        os.writeString(0, this.fileName);
    }
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(1, this.filePath);
    }
    os.writeString(2, this.businessName);
    os.resumePrecision && os.resumePrecision();
};
COMM.DeleteFileReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.DeleteFileReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.DeleteFileReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.fileName = this.fileName;
    tmp.filePath = this.filePath;
    tmp.businessName = this.businessName;
    
    return tmp;
}
COMM.DeleteFileReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fileName") || (this.fileName = json.fileName);
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
    !json.hasOwnProperty("businessName") || (this.businessName = json.businessName);
}
COMM.DeleteFileReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.DeleteFileReq.new = function () {
    return new COMM.DeleteFileReq();
}
COMM.DeleteFileReq.create = function (is) {
    return COMM.DeleteFileReq._readFrom(is);
}
COMM.DeleteFileRsp = function() {
    this.errCode = 0;
    this.errMsg = "";
    this._classname = "COMM.DeleteFileRsp";
};
COMM.DeleteFileRsp.prototype = new TafStream.JceStruct();
COMM.DeleteFileRsp._classname = "COMM.DeleteFileRsp";

COMM.DeleteFileRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.DeleteFileRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.DeleteFileRsp._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.DeleteFileRsp();
    tmp.errCode = is.readInt32(0, false, 0);
    tmp.errMsg = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.DeleteFileRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.errCode != undefined && this.errCode != 0) {
        os.writeInt32(0, this.errCode);
    }
    if (this.errMsg != undefined && this.errMsg != "") {
        os.writeString(1, this.errMsg);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.DeleteFileRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.DeleteFileRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.DeleteFileRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.errCode = this.errCode;
    tmp.errMsg = this.errMsg;
    
    return tmp;
}
COMM.DeleteFileRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("errCode") || (this.errCode = json.errCode);
    !json.hasOwnProperty("errMsg") || (this.errMsg = json.errMsg);
}
COMM.DeleteFileRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.DeleteFileRsp.new = function () {
    return new COMM.DeleteFileRsp();
}
COMM.DeleteFileRsp.create = function (is) {
    return COMM.DeleteFileRsp._readFrom(is);
}
COMM.MakeDirReq = function() {
    this.filePath = "";
    this._classname = "COMM.MakeDirReq";
};
COMM.MakeDirReq.prototype = new TafStream.JceStruct();
COMM.MakeDirReq._classname = "COMM.MakeDirReq";

COMM.MakeDirReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.MakeDirReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.MakeDirReq._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.MakeDirReq();
    tmp.filePath = is.readString(0, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.MakeDirReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.filePath != undefined && this.filePath != "") {
        os.writeString(0, this.filePath);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.MakeDirReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.MakeDirReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.MakeDirReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.filePath = this.filePath;
    
    return tmp;
}
COMM.MakeDirReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("filePath") || (this.filePath = json.filePath);
}
COMM.MakeDirReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.MakeDirReq.new = function () {
    return new COMM.MakeDirReq();
}
COMM.MakeDirReq.create = function (is) {
    return COMM.MakeDirReq._readFrom(is);
}
COMM.MakeDirRsp = function() {
    this.errCode = 0;
    this.errMsg = "";
    this._classname = "COMM.MakeDirRsp";
};
COMM.MakeDirRsp.prototype = new TafStream.JceStruct();
COMM.MakeDirRsp._classname = "COMM.MakeDirRsp";

COMM.MakeDirRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
COMM.MakeDirRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
COMM.MakeDirRsp._readFrom = function (is) {
    if (is.readResumePrecision == undefined) {
        is.readResumePrecision = function() {
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new COMM.MakeDirRsp();
    tmp.errCode = is.readInt32(0, false, 0);
    tmp.errMsg = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
COMM.MakeDirRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.errCode != undefined && this.errCode != 0) {
        os.writeInt32(0, this.errCode);
    }
    if (this.errMsg != undefined && this.errMsg != "") {
        os.writeString(1, this.errMsg);
    }
    os.resumePrecision && os.resumePrecision();
};
COMM.MakeDirRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
COMM.MakeDirRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
COMM.MakeDirRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.errCode = this.errCode;
    tmp.errMsg = this.errMsg;
    
    return tmp;
}
COMM.MakeDirRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("errCode") || (this.errCode = json.errCode);
    !json.hasOwnProperty("errMsg") || (this.errMsg = json.errMsg);
}
COMM.MakeDirRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
COMM.MakeDirRsp.new = function () {
    return new COMM.MakeDirRsp();
}
COMM.MakeDirRsp.create = function (is) {
    return COMM.MakeDirRsp._readFrom(is);
}

COMM.FileFdfsServerProxy.prototype.deleteFile = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, COMM.DeleteFileRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('deleteFile', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

COMM.FileFdfsServerProxy.prototype.downloadFile = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, COMM.DownloadFileRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('downloadFile', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

COMM.FileFdfsServerProxy.prototype.listFiles = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, COMM.ListFilesRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('listFiles', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

COMM.FileFdfsServerProxy.prototype.makeDir = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, COMM.MakeDirRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('makeDir', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

COMM.FileFdfsServerProxy.prototype.uploadFile = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, COMM.UploadFileRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('uploadFile', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



